/*
  Created by: Fei Song
  File Name: tiny.cup
  To Build: java java_cup.Main < tiny.cup
*/
   
   
/* ----------------------Preliminary Declarations Section--------------------*/
   
/* Import the class java_cup.runtime.*  */
//import java_cup.runtime.*;
import absyn.*;
   
/* Parser code to change the way the parser reports errors (include
   line and column number of the error). */
parser code {:
    
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
   
        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        /* Add to the end of the StringBuffer error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuffer 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

:};
   
   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
terminal IF, ELSE, INT, RETURN, VOID, WHILE;
terminal PLUS, MINUS, TIMES, OVER;
terminal EQ, COMPARE, NEQ, LT, LTE, GT, GTE;
terminal COMMA, LPAREN, RPAREN, LBRACK, RBRACK, LBRACE, RBRACE, SEMI;
terminal ID, NUM;
terminal ERROR;
   
non terminal program, dec_list;
non terminal var_dec, fun_dec, type_specifier, loc_dec;
non terminal stmt, comp_stmt, stmt_list, selection_stmt, iteration_stmt, return_stmt;
non terminal exp, factor, arg_list;
non terminal param_list, param;
non terminal var;

precedence nonassoc LT, GT, EQ, COMPARE, NEQ, LTE, GTE;
precedence left PLUS, MINUS;
precedence left TIMES, OVER;
precedence left  ELSE;


/* ----------------------------Grammar Section-------------------- */
   
start with program;


program	     ::=  dec_list
                ;

dec_list      ::=  dec_list var_dec
                | dec_list fun_dec
                | var_dec
                | fun_dec
                ; 

var_dec       ::= type_specifier ID SEMI
                | type_specifier ID LBRACK NUM RBRACK SEMI
                ;

type_specifier ::= INT
                 | VOID
                 ;

fun_dec        ::= type_specifier ID LPAREN param_list RPAREN comp_stmt
                 | type_specifier ID LPAREN VOID RPAREN comp_stmt
                 ;

param_list     ::= param_list COMMA param 
                 | param
                 ;

param          ::= type_specifier ID
                 | type_specifier ID LBRACK RBRACK
                 ;

comp_stmt     ::= LBRACE loc_dec  stmt_list RBRACE
                 ;

loc_dec        ::= loc_dec var_dec
                 |
                 ;

stmt_list      ::= stmt_list stmt
                 |
                 ;

stmt           ::= exp SEMI
                 | SEMI
                 | comp_stmt
                 | selection_stmt
                 | iteration_stmt
                 | return_stmt
                 ;

selection_stmt ::= IF LPAREN exp RPAREN stmt
                 | IF LPAREN exp RPAREN stmt ELSE stmt
                 ;

iteration_stmt ::= WHILE LPAREN exp RPAREN stmt
                 ;

return_stmt    ::= RETURN exp SEMI
                 | RETURN SEMI
                 ;

exp            ::= var EQ exp
                 | exp LTE exp 
                 | exp LT exp 
                 | exp GT exp 
                 | exp GTE exp 
                 | exp COMPARE exp 
                 | exp NEQ exp 
                 | exp PLUS exp
                 | exp MINUS exp 
                 | exp TIMES exp
                 | exp OVER exp 
                 | factor
                 ;

var            ::= ID
                 | ID LBRACK exp RBRACK
                 ;    

factor         ::= LPAREN exp RPAREN
                 | var
                 | ID LPAREN arg_list RPAREN
                 | ID LPAREN RPAREN
                 | NUM
                 ;

arg_list       ::= arg_list COMMA exp
                 | exp
                 ;
